
import com.itextpdf.text.Chunk;
import oru.inf.InfDB;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Image;
import com.itextpdf.text.Font;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.text.StyleConstants.FontConstants;
import oru.inf.InfException;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.SwingUtilities;

/**
 *
 * @author almahedengren
 */
public class ShowOrderGUI extends javax.swing.JFrame {

    public static InfDB idb;
    private String username;
    private DefaultListModel<String> list;
    private DefaultListModel<String> model = new DefaultListModel<>();

    /**
     * Creates new form PDF
     */
    public ShowOrderGUI(String username) {
        idb = HattmakarnaStudio.getDatabase();

        initComponents();
        list = new DefaultListModel<>();

        this.setLocationRelativeTo(null);

        fillCustomer();
        btnSave.setVisible(false);
        btnStatus.setVisible(false);
        lockTextField();

        //Denna kod gör så att programmet inte stängs när fönster stängs
        ShowOrderGUI.this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.username = username;

        this.lblLoggedIn(lblLoggedIn, username);

    }

    private void fillCustomer() {
        try {
            ArrayList<Customer> allCustomers = Customer.getAllCustomers();

            for (Customer aCustomer : allCustomers) {
                
                if(!aCustomer.getFirstName().equals("Anonym")){                  
                cbCustomer.addItem(aCustomer.getCustomerID() + ": " + aCustomer.getLastName() + ", " + aCustomer.getFirstName());
                }
            }
        } catch (Exception e) {
            System.out.print(e.getMessage());
        }
    }

    private void fillOrders() {

        try {
            list.removeAllElements();

            String selection = cbCustomer.getSelectedItem().toString();
            String[] parts = selection.split(":");
            System.out.println(parts[0]);

            ArrayList<String> allOrders = idb.fetchColumn("SELECT OrderID FROM orders WHERE orders.Customer =" + parts[0]);
            for (String order : allOrders) {
                System.out.println(order);
                String getOrderdate = idb.fetchSingle("SELECT ORDERDATE FROM ORDERS WHERE orders.OrderID =" + order);
                String getPrice = idb.fetchSingle("SELECT PRICE FROM ORDERS WHERE orders.OrderID =" + order);
                list.addElement("Ordernr:" + order + ", " + getOrderdate + ", " + getPrice + "kr");

                listOrders.setModel(list);
            }

        } catch (Exception e) {
            System.out.print(e.getMessage());
        }

    }

    private void fillHats(String OrderID) {

        OrderID = txtShowOrderID.getText();
        Order order = new Order(OrderID);

        ArrayList<Hat> basicSpecialHatList = order.getUnfinishedHats();
        ArrayList<String> customHatList = order.getUnfinishedCustomHat();

        //Loop for finished hats:
        try {
            for (Hat ufh : basicSpecialHatList) {

                String hattID = idb.fetchSingle("SELECT Hat FROM hatinorder WHERE AnOrder =" + OrderID);
                String hatName = idb.fetchSingle("SELECT HatName FROM hat WHERE HattID =" + hattID);

            }
        } catch (Exception e) {
            System.out.print(e.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPDF = new javax.swing.JButton();
        txtOrderID = new javax.swing.JTextField();
        lblOrderID = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblLoggedIn = new javax.swing.JLabel();
        lblCustomer = new javax.swing.JLabel();
        lblSok = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblOrderID2 = new javax.swing.JLabel();
        lblShipping = new javax.swing.JLabel();
        lblOrderDate = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblNote = new javax.swing.JLabel();
        lblExpress = new javax.swing.JLabel();
        lblHats = new javax.swing.JLabel();
        txtShowOrderID = new javax.swing.JTextField();
        txtShowOrderDate = new javax.swing.JTextField();
        txtShowShipping = new javax.swing.JTextField();
        txtShowPrice = new javax.swing.JTextField();
        txtShowStatus = new javax.swing.JTextField();
        txtShowExpress = new javax.swing.JTextField();
        txtPostalNr = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        btnStatus = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlAllHats = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtShowNote = new javax.swing.JTextArea();
        btnSerach1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOrders = new javax.swing.JList<>();
        btnEdit = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        cbCustomer = new javax.swing.JComboBox<>();
        btnReturnPDF = new javax.swing.JButton();
        btnDeleteOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPDF.setText("Skapa fraktsedel");
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });

        txtOrderID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtOrderIDMouseClicked(evt);
            }
        });

        lblOrderID.setText("OrderID:");

        btnBack.setText("Tillbaka");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblLoggedIn.setText("Du är inloggad som:");

        lblCustomer.setText("Namn:");

        lblSok.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblSok.setText("Sök efter..");

        jPanel1.setBackground(new java.awt.Color(102, 148, 200));

        lblOrderID2.setText("OrderID:");

        lblShipping.setText("Leveransadress");

        lblOrderDate.setText("Beställningsdatum");

        lblStatus.setText("Avslutad");

        lblPrice.setText("Pris");

        lblNote.setText("Anteckning:");

        lblExpress.setText("Expressorder");

        lblHats.setText("Hattar:");

        txtShowOrderID.setEditable(false);

        txtShowOrderDate.setEditable(false);

        btnStatus.setText("Avsluta");
        btnStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatusActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jlAllHats);

        txtShowNote.setColumns(20);
        txtShowNote.setLineWrap(true);
        txtShowNote.setRows(5);
        jScrollPane3.setViewportView(txtShowNote);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblHats)
                    .addComponent(lblPrice)
                    .addComponent(lblStatus)
                    .addComponent(lblOrderDate)
                    .addComponent(lblShipping)
                    .addComponent(lblOrderID2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblNote)
                        .addComponent(lblExpress)))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtShowOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtShowShipping, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtShowOrderDate)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtPostalNr, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtShowStatus)
                                    .addComponent(txtShowPrice))
                                .addGap(36, 36, 36)
                                .addComponent(btnStatus))
                            .addComponent(txtShowExpress, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtShowExpress, txtShowPrice, txtShowStatus});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtShowOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOrderID2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtShowShipping, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblShipping))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPostalNr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderDate)
                    .addComponent(txtShowOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(txtShowStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice)
                    .addComponent(txtShowPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblExpress)
                            .addComponent(txtShowExpress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHats)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblNote))
                .addGap(54, 54, 54))
        );

        btnSerach1.setText("Sök");
        btnSerach1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerach1ActionPerformed(evt);
            }
        });

        listOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listOrders);

        btnEdit.setText("Redigera order");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnSave.setText("Spara ändringar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        cbCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj Kund" }));
        cbCustomer.setToolTipText("");
        cbCustomer.setMaximumSize(new java.awt.Dimension(127, 127));
        cbCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCustomerActionPerformed(evt);
            }
        });

        btnReturnPDF.setText("Skapa retursedel");
        btnReturnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnPDFActionPerformed(evt);
            }
        });

        btnDeleteOrder.setText("Ta bort order");
        btnDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLoggedIn)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblSok)
                                            .addComponent(lblOrderID)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(lblCustomer)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtOrderID)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSerach1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cbCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(btnBack)))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnReturnPDF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSave))
                            .addComponent(btnPDF)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDeleteOrder, btnEdit, btnPDF, btnReturnPDF, btnSave});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblLoggedIn)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReturnPDF)
                            .addComponent(btnDeleteOrder)
                            .addComponent(btnSave))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPDF)
                            .addComponent(btnEdit)
                            .addComponent(btnBack)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSok)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOrderID)
                            .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSerach1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCustomer)
                            .addComponent(cbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDFActionPerformed

        Order anOrder = new Order(txtShowOrderID.getText());
        try {
            if (Validation.checkEmpty(txtShowOrderID)) {
                try {
                    //created ShowOrderGUI document instance
                    Document doc = new Document();

                    //generate a ShowOrderGUI at the specified location
                    OutputStream outputStream = new FileOutputStream("Fraktsedel.pdf");

                    //Create PDFWriter instance.
                    PdfWriter.getInstance(doc, outputStream);

                    //opens the ShowOrderGUI
                    doc.open();

                    //adds fonts
                    Font font1 = new Font(Font.FontFamily.TIMES_ROMAN, 24, Font.BOLD);
                    Font font2 = new Font(Font.FontFamily.TIMES_ROMAN, 20);
                    Font font3 = new Font(Font.FontFamily.TIMES_ROMAN, 20, Font.BOLD);
                    Image image = Image.getInstance("build/classes/ImageHat/hatten 2.jpeg");

                    image.scaleToFit(150, 150);

                    //adds paragraph to the ShowOrderGUI file
                    doc.add(image);
                    doc.add(new Paragraph("                              Fraktsedel        ", font1));
                    doc.add(new Paragraph(" "));

                    //Avsändaradressen
                    doc.add(new Paragraph("Avsändare: ", font3));
                    Chunk chunk4 = new Chunk("Hattmakarna", font2);
                    chunk4.setAnchor("./" + new File("Fraktsedel.pdf").getName());
                    doc.add(chunk4);
                    doc.add(new Paragraph(" "));

                    Chunk chunk = new Chunk("Hattmakarvägen 1", font2);
                    chunk.setAnchor("./" + new File("Fraktsedel.pdf").getName());
                    doc.add(chunk);
                    doc.add(new Paragraph(" "));

                    Chunk chunken = new Chunk("70225 Örebro", font2);
                    chunk.setAnchor("./" + new File("Fraktsedel.pdf").getName());
                    doc.add(chunken);
                    doc.add(new Paragraph(" "));

                    //Leveransadressen
                    doc.add(new Paragraph("Mottagare: ", font3));

                    String namn = "Select FirstName from Customer join orders o on customer.CustomerID = o.Customer where orderid = '" + txtShowOrderID.getText() + "'";
                    String firstName = idb.fetchSingle(namn);

                    String namn1 = "Select LastName from Customer join orders o on customer.CustomerID = o.Customer where orderid = '" + txtShowOrderID.getText() + "'";
                    String lastName = idb.fetchSingle(namn1);

                    Chunk chunk6 = new Chunk(firstName, font2);
                    chunk6.setAnchor("./" + new File("Retursedel.pdf").getName());
                    doc.add(chunk6);

                    Chunk chunk7 = new Chunk(" " + lastName, font2);
                    chunk7.setAnchor("./" + new File("Retursedel.pdf").getName());
                    doc.add(chunk7);
                    doc.add(new Paragraph(" "));

                    String address = anOrder.getShipmentAddress(txtShowOrderID.getText());

                    Chunk chunk1 = new Chunk(address, font2);
                    chunk.setAnchor("./" + new File("Fraktsedel.pdf").getName());
                    doc.add(chunk1);
                    doc.add(new Paragraph(" "));

                    String postalNr = anOrder.getPostalNr(txtShowOrderID.getText());
                    Chunk chunk10 = new Chunk(postalNr, font2);
                    chunk.setAnchor("./" + new File("Fraktsedel.pdf").getName());
                    doc.add(chunk10);

                    String city = anOrder.getCity(txtShowOrderID.getText());
                    Chunk chunk11 = new Chunk(" " + city, font2);
                    chunk.setAnchor("./" + new File("Fraktsedel.pdf").getName());
                    doc.add(chunk11);
                    doc.add(new Paragraph(" "));

                    //Priset
                    doc.add(new Paragraph("Pris: ", font3));

                    String price = anOrder.getPrice(txtShowOrderID.getText());

                    Chunk chunk2 = new Chunk(price, font2);
                    chunk.setAnchor("./" + new File("Fraktsedel.pdf").getName());
                    doc.add(chunk2);
                    doc.add(new Paragraph(" "));

                    //Anteckning
                    doc.add(new Paragraph("Anteckning: ", font3));

                    String note = anOrder.getNote(txtShowOrderID.getText());

                    Chunk chunk3 = new Chunk(note, font2);
                    chunk.setAnchor("./" + new File("Fraktsedel.pdf").getName());
                    doc.add(chunk3);
                    doc.add(new Paragraph(" "));

                    //öppnar pdf
                    Desktop.getDesktop().open(new File("Fraktsedel.pdf"));

                    //close the ShowOrderGUI file
                    doc.close();

                    //closes the writer
                    outputStream.close();

                    JOptionPane.showMessageDialog(null, "PDF skapad.");
                } catch (DocumentException e) {
                    e.printStackTrace();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ShowOrderGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(ShowOrderGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InfException ex) {
                    Logger.getLogger(ShowOrderGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "OrderID finns inte.");
        }

    }//GEN-LAST:event_btnPDFActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        new HomePageGUI(username).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSerach1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerach1ActionPerformed

        String orderID = txtOrderID.getText();
        cbCustomer.setSelectedIndex(0);
        tomFalt();

        try {

            String query = "SELECT * FROM Orders WHERE orderid = '" + orderID + "'";
            HashMap<String, String> orderInfo = idb.fetchRow(query);

            txtShowOrderID.setText(orderID);

            String query2 = "SELECT * FROM hatinorder WHERE AnOrder = " + orderID;
            ArrayList<HashMap<String, String>> hatsInOrder = idb.fetchRows(query2);

            if (hatsInOrder.size() > 0) {
                for (HashMap row : hatsInOrder) {
                    String hatName = "";
                    String amount = "";

                    for (var key : row.keySet()) {
                        key = key.toString();

                        if (key.equals("Hat")) {
                            hatName = idb.fetchSingle("select hatname from hat where hatID =" + row.get(key));
                        }

                        if (key.equals("Amount")) {
                            amount = row.get(key).toString();
                        }
                    }
                    if (!hatName.equals("")) {
                        model.addElement(hatName + " " + amount + " st");
                    }
                }
            }

            String query3 = "SELECT * FROM customhatinorder WHERE AnOrder = " + orderID;
            ArrayList<HashMap<String, String>> customHatsInOrder = idb.fetchRows(query3);

            if (customHatsInOrder.size() > 0) {
                for (HashMap row : customHatsInOrder) {
                    String hatName = "";
                    String amount = "";
                    String note = "";

                    for (var key : row.keySet()) {
                        key = key.toString();

                        if (key.equals("CustomHat")) {
                            String hatID = idb.fetchSingle("select StandardHat from CustomHat where CustomhatID =" + row.get(key));
                            hatName = idb.fetchSingle("select hatName from Hat where HatID = " + hatID);
                            note = idb.fetchSingle("select note from customhat where CustomhatID =" + row.get(key));
                        }

                        if (key.equals("Amount")) {
                            amount = row.get(key).toString();
                        }

                        if (!hatName.equals("")) {
                            model.addElement(hatName + " #Anpassad" + " " + amount + " st");
                            model.addElement("- '" + note + "'");
                        }
                    }
                }
            }

            jlAllHats.setModel(model);
            jlAllHats.getModel();

            txtShowShipping.setText(orderInfo.get("ShipmentAddress"));
            txtShowOrderDate.setText(orderInfo.get("Orderdate"));
            txtShowPrice.setText(orderInfo.get("Price"));
            txtShowNote.setText(orderInfo.get("Note"));
            txtPostalNr.setText(orderInfo.get("PostalNr"));
            txtCity.setText(orderInfo.get("City"));

            if (orderInfo.get("IsFinished").equals("0")) {
                txtShowStatus.setText("Nej");
            }

            if (orderInfo.get("IsFinished").equals("1")) {
                txtShowStatus.setText("Ja");
            }

            if (orderInfo.get("IsExpress").equals("0")) {
                txtShowExpress.setText("Nej");
            }
            if (orderInfo.get("IsExpress").equals("1")) {
                txtShowExpress.setText("Ja");
            }

        } catch (Exception e) {
            // JOptionPane.showMessageDialog(null, "Fel");
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_btnSerach1ActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (txtShowOrderID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "En order måste vara vald först");
        } else {
            btnSave.setVisible(true);
            btnEdit.setVisible(false);
            btnStatus.setVisible(true);
            editText();
        }


    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        if (Validation.checkEmpty(txtShowShipping) && Validation.checkEmpty(txtPostalNr) && Validation.checkEmpty(txtCity) && Validation.checkEmpty(txtShowPrice) && Validation.checkEmpty(txtShowExpress))
            
            try {

            String newAddress = txtShowShipping.getText();
            String newPostalNr = txtPostalNr.getText();
            String newCity = txtCity.getText();
            String newStatus = txtShowStatus.getText();
            String newPrice = txtShowPrice.getText();
            String newNote = txtShowNote.getText();
            String newExpress = txtShowExpress.getText();

            idb.fetchSingle("Update Orders Set ShipmentAddress = '" + newAddress + "', Price = '" + newPrice + "', Note = '" + newNote + "', PostalNr = '" + newPostalNr + "', City = '" + newCity + "' Where orderID = '" + txtShowOrderID.getText() + "'");

            if (txtShowExpress.equals("ja")) {
                String isExpress = "Update Orders set isExpress = 1 where orderID = '" + txtShowOrderID.getText() + "'";
                idb.update(isExpress);
            } else {

                String isExpress = "Update Orders set isExpress = 0 where orderID = '" + txtShowOrderID.getText() + "'";
                idb.update(isExpress);

            }

            if (txtShowStatus.getText().equals("Ja")) {
                String isExpress = "Update Orders set isFinished = 1 where orderID = '" + txtShowOrderID.getText() + "'";
                idb.update(isExpress);
            } else {
                String isExpress = "Update Orders set isFinished = 0 where orderID = '" + txtShowOrderID.getText() + "'";
                idb.update(isExpress);

            }

            JOptionPane.showMessageDialog(null, "Ändringar har sparats!");

            btnSave.setVisible(false);
            btnEdit.setVisible(true);
            btnSave.setVisible(false);
            btnStatus.setVisible(false);
            lockTextField();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Någon ruta är tom");

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void editText() {

        txtShowShipping.setEditable(true);
        txtPostalNr.setEditable(true);
        txtCity.setEditable(true);
        txtShowPrice.setEditable(true);
        txtShowNote.setEditable(true);
        txtShowExpress.setEditable(true);

    }

    private void lockTextField() {
        txtShowShipping.setEditable(false);
        txtPostalNr.setEditable(false);
        txtCity.setEditable(false);
        txtShowPrice.setEditable(false);
        txtShowNote.setEditable(false);
        txtShowExpress.setEditable(false);
        txtShowStatus.setEditable(false);
    }

    private void tomFalt() {

        txtShowOrderID.setText("");
        txtShowShipping.setText("");
        txtPostalNr.setText("");
        txtCity.setText("");
        txtShowOrderDate.setText("");
        txtShowPrice.setText("");
        txtShowNote.setText("");
        txtShowStatus.setText("");
        txtShowExpress.setText("");
        txtOrderID.setText("");
        model.removeAllElements();
        jlAllHats.setModel(model);

    }


    private void cbCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCustomerActionPerformed
        if (cbCustomer.getSelectedIndex() > 0) {

            tomFalt();
            fillOrders();
        }

    }//GEN-LAST:event_cbCustomerActionPerformed

    private void btnReturnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnPDFActionPerformed
        Order anOrder = new Order(txtShowOrderID.getText());

        try {
            if (Validation.checkEmpty(txtShowOrderID)) {
                try {
                    //created ShowOrderGUI document instance
                    Document docReturn = new Document();

                    //generate a ShowOrderGUI at the specified location
                    OutputStream outputStream = new FileOutputStream("Retursedel.pdf");

                    //Create PDFWriter instance.
                    PdfWriter.getInstance(docReturn, outputStream);

                    //opens the ShowOrderGUI
                    docReturn.open();

                    //adds fonts
                    Font font1 = new Font(Font.FontFamily.TIMES_ROMAN, 24, Font.BOLD);
                    Font font2 = new Font(Font.FontFamily.TIMES_ROMAN, 20);
                    Font font3 = new Font(Font.FontFamily.TIMES_ROMAN, 20, Font.BOLD);
                    Image image = Image.getInstance("build/classes/ImageHat/hatten 2.jpeg");

                    image.scaleToFit(150, 150);

                    //adds paragraph to the ShowOrderGUI file
                    docReturn.add(image);
                    docReturn.add(new Paragraph("                              Retursedel        ", font1));
                    docReturn.add(new Paragraph(" "));

                    //Mottagare
                    docReturn.add(new Paragraph("Mottagare: ", font3));

                    Chunk chunk4 = new Chunk("Hattmakarna", font2);
                    chunk4.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk4);
                    docReturn.add(new Paragraph(" "));

                    Chunk chunk = new Chunk("Hattmakarvägen 1", font2);
                    chunk.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk);
                    docReturn.add(new Paragraph(" "));

                    Chunk chunk8 = new Chunk("70225", font2);
                    chunk8.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk8);
//                    docReturn.add(new Paragraph(" "));

                    Chunk chunk9 = new Chunk(" Örebro", font2);
                    chunk9.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk9);
                    docReturn.add(new Paragraph(" "));

                    //Avsändare
                    docReturn.add(new Paragraph("Avsändare: ", font3));

                    String namn = "Select FirstName from Customer join orders o on customer.CustomerID = o.Customer where orderid = '" + txtShowOrderID.getText() + "'";
                    String firstName = idb.fetchSingle(namn);

                    String namn1 = "Select LastName from Customer join orders o on customer.CustomerID = o.Customer where orderid = '" + txtShowOrderID.getText() + "'";
                    String lastName = idb.fetchSingle(namn1);

                    Chunk chunk6 = new Chunk(firstName, font2);
                    chunk6.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk6);

                    Chunk chunk7 = new Chunk(" " + lastName, font2);
                    chunk7.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk7);
                    docReturn.add(new Paragraph(" "));

                    String address = anOrder.getShipmentAddress(txtShowOrderID.getText());
                    Chunk chunk1 = new Chunk(address, font2);
                    chunk.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk1);
                    docReturn.add(new Paragraph(" "));

                    //Kommentera av när metoder finns i Orderklassen.
                    String postalNr = anOrder.getPostalNr(txtShowOrderID.getText());
                    Chunk chunk10 = new Chunk(postalNr, font2);
                    chunk.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk10);

                    String city = anOrder.getCity(txtShowOrderID.getText());
                    Chunk chunk11 = new Chunk(" " + city, font2);
                    chunk.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk11);
                    docReturn.add(new Paragraph(" "));

                    //Priset
                    docReturn.add(new Paragraph("Pris: ", font3));

                    String price = anOrder.getPrice(txtShowOrderID.getText());

                    Chunk chunk2 = new Chunk(price, font2);
                    chunk.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk2);
                    docReturn.add(new Paragraph(" "));

                    //Anteckning
                    docReturn.add(new Paragraph("Anteckning: ", font3));

                    String note = anOrder.getNote(txtShowOrderID.getText());

                    Chunk chunk3 = new Chunk(note, font2);
                    chunk.setAnchor("./" + new File("Retursedel.pdf").getName());
                    docReturn.add(chunk3);
                    docReturn.add(new Paragraph(" "));

                    //öppnar pdf
                    Desktop.getDesktop().open(new File("Retursedel.pdf"));

                    //close the ShowOrderGUI file
                    docReturn.close();

                    //closes the writer
                    outputStream.close();

                    JOptionPane.showMessageDialog(null, "PDF skapad.");
                } catch (DocumentException e) {
                    e.printStackTrace();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ShowOrderGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(ShowOrderGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InfException ex) {
                    Logger.getLogger(ShowOrderGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "OrderID finns inte.");
        }

    }//GEN-LAST:event_btnReturnPDFActionPerformed

    private void txtOrderIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtOrderIDMouseClicked
        // TODO add your handling code here:
        tomFalt();
        list.removeAllElements();
    }//GEN-LAST:event_txtOrderIDMouseClicked

    private void listOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listOrdersMouseClicked
        // TODO add your handling code here:

        model.removeAllElements();
        jlAllHats.setModel(model);

        String orderId = listOrders.getSelectedValue().toString();
        String[] parts = orderId.split(":");
        String[] parts2 = parts[1].split(",");
        System.out.println(parts2[0]);

        txtShowOrderID.setText(parts2[0]);

        try {
            String query = "SELECT * FROM Orders WHERE orderid = " + parts2[0];
            HashMap<String, String> orderInfo = idb.fetchRow(query);

            String query2 = "SELECT * FROM hatinorder WHERE AnOrder = " + parts2[0];
            ArrayList<HashMap<String, String>> hatsInOrder = idb.fetchRows(query2);

            if (hatsInOrder.size() > 0) {
                for (HashMap row : hatsInOrder) {
                    String hatName = "";
                    String amount = "";

                    for (var key : row.keySet()) {
                        key = key.toString();

                        if (key.equals("Hat")) {
                            hatName = idb.fetchSingle("select hatname from hat where hatID =" + row.get(key));
                        }

                        if (key.equals("Amount")) {
                            amount = row.get(key).toString();
                        }
                    }
                    if (!hatName.equals("")) {
                        model.addElement(hatName + " " + amount + " st");
                    }
                }
            }

                String query3 = "SELECT * FROM customhatinorder WHERE AnOrder = " + parts2[0];
                ArrayList<HashMap<String, String>> customHatsInOrder = idb.fetchRows(query3);

                if (customHatsInOrder.size() > 0) {
                    for (HashMap row : customHatsInOrder) {
                        String hatName = "";
                        String amount = "";
                        String note = "";
                        
                        for (var key : row.keySet()) {
                            key = key.toString();

                            if (key.equals("CustomHat")) {
                                String hatID = idb.fetchSingle("select StandardHat from CustomHat where CustomhatID =" + row.get(key));
                                hatName = idb.fetchSingle("select hatName from Hat where HatID = " + hatID);
                                note = idb.fetchSingle("select note from customhat where CustomhatID =" + row.get(key));
                            }

                            if (key.equals("Amount")) {
                                amount = row.get(key).toString();
                            }

                            if (!hatName.equals("")) {
                                model.addElement(hatName + " #Anpassad" + " " + amount + " st");
                                model.addElement("- '" + note + "'");
                            }
                        }
                    }
                

                jlAllHats.setModel(model);
                jlAllHats.getModel();

                txtShowShipping.setText(orderInfo.get("ShipmentAddress"));
                txtPostalNr.setText(orderInfo.get("PostalNr"));
                txtCity.setText(orderInfo.get("City"));
                txtShowOrderDate.setText(orderInfo.get("Orderdate"));
                txtShowPrice.setText(orderInfo.get("Price"));
                txtShowNote.setText(orderInfo.get("Note"));

                if (orderInfo.get("IsFinished").equals("0")) {
                    txtShowStatus.setText("Nej");
                }

                if (orderInfo.get("IsFinished").equals("1")) {
                    txtShowStatus.setText("Ja");
                }

                if (orderInfo.get("IsExpress").equals("0")) {
                    txtShowExpress.setText("Nej");
                }
                if (orderInfo.get("IsExpress").equals("1")) {
                    txtShowExpress.setText("Ja");
                }
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_listOrdersMouseClicked

    private void btnDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrderActionPerformed
        Order anOrder = new Order(txtShowOrderID.getText());

        anOrder.deleteOrder(txtShowOrderID.getText());

        tomFalt();
        list.removeAllElements();
        cbCustomer.setSelectedIndex(-1);
        JOptionPane.showMessageDialog(null, "Din order är borttagen");
        btnSave.setVisible(false);
    }//GEN-LAST:event_btnDeleteOrderActionPerformed

    private void btnStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatusActionPerformed
        // TODO add your handling code here:
        txtShowStatus.setText("Ja");
    }//GEN-LAST:event_btnStatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void lblLoggedIn(JLabel textbox, String username) {
        textbox.setText("Du är inloggad som " + username + ".");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteOrder;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnPDF;
    private javax.swing.JButton btnReturnPDF;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSerach1;
    private javax.swing.JToggleButton btnStatus;
    private javax.swing.JComboBox<String> cbCustomer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> jlAllHats;
    private javax.swing.JLabel lblCustomer;
    private javax.swing.JLabel lblExpress;
    private javax.swing.JLabel lblHats;
    private javax.swing.JLabel lblLoggedIn;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblOrderDate;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblOrderID2;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblShipping;
    private javax.swing.JLabel lblSok;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList<String> listOrders;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JTextField txtPostalNr;
    private javax.swing.JTextField txtShowExpress;
    private javax.swing.JTextArea txtShowNote;
    private javax.swing.JTextField txtShowOrderDate;
    private javax.swing.JTextField txtShowOrderID;
    private javax.swing.JTextField txtShowPrice;
    private javax.swing.JTextField txtShowShipping;
    private javax.swing.JTextField txtShowStatus;
    // End of variables declaration//GEN-END:variables
}
